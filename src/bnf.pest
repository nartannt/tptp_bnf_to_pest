
comment = {NEWLINE | ("%" ~ (&!NEWLINE ~ ANY)* ~ (NEWLINE | &EOI )) }
WHITESPACE = _{" " | "\t" }

name = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

rule_separator = {"::=" | ":=="}
regex_rule_separator = {"::-" | ":::"}
separator = {rule_separator | regex_rule_separator}

star = {"*"}
plus = {"+"}
not = {"^"}
dot = {"."}
dash = {"-"}
lparen = {"("}
rparen = {")"}
or = {"|"}

non_terminal = {"<" ~ name ~ ">"}

token = @{ (&!NEWLINE ~ &!separator ~ &!non_terminal ~ &!" " ~ &!or ~ ASCII)+}

pattern = {(token | (non_terminal ~ star?) ~ &!separator )*}

expansion = {pattern ~ ( or ~ NEWLINE? ~ pattern ~ NEWLINE? )* }

syntax_rule = {non_terminal ~ rule_separator ~  expansion }


// expressions between [], they represent a single character, a sequence of them
// is to be understood as a disjunction, additionnaly must be taken into account
// the escape '\' character and ranges: char1-char2
special_char = {"\\" ~ ASCII_DIGIT+}
regex_chars_inner = {&!not ~ &!"[" ~ &!"]" ~ ("\\\\" | "\\n" | special_char ~ (dash ~ special_char)? | ASCII) }
regex_chars = {"[" ~ not? ~ regex_chars_inner+ ~ "]"}

regex_expression = { regex_chars ~ (star | plus)? | dot}

regex_pattern = {regex_expression ~ regex_pattern* | non_terminal ~ (star | plus)? ~ regex_pattern* }

regex_expansion = {non_terminal ~ (or ~ non_terminal)+ | lparen ~ regex_expansion ~ rparen ~ (star | plus)? ~ regex_expansion* | regex_pattern ~ (or ~ regex_pattern)+ | regex_pattern }

//| "(" ~ regex_expansion* ~ ")" ~ regex_expansion* | "(" ~ regex_expansion ~ (or ~ regex_expansion)+ ~ ")" }

regex_rule = {non_terminal ~ regex_rule_separator ~  regex_expansion }

rule = {syntax_rule | regex_rule}

file = {(rule | comment)* ~ EOI}

